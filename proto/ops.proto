syntax = "proto3";

package stepir;

import "datatype.proto";
import "func.proto";

message Operation {
  string name = 1;
  uint64 id = 2;
  ChannelInfo channel_info = 3;
  reserved 4 to 10;
  oneof op {
    Input input = 11;
    Map map = 12;
    // Flatmap flatmap = 13;
    // Accum accum = 14;
    // Scan scan = 17;
    Zip zip = 15;
    // Unzip unzip = 16;
    // Broadcast broadcast = 26;
    // Enumerate enumerate = 18;
    // RepeatRef repeat_ref = 19;
    // RepeatN repeat_n = 20;
    // Bufferize bufferize = 21;
    // Promote promote = 22;
    // Reshape reshape = 23;
    // Flatten flatten = 24;
    // FlatPartition flat_partition = 25;
    // FlatReassemble flat_reassemble = 26;    
    // FnBlock fn_block = 27;
    // // reserved 28 to 35?
    // RepeatStatic repeat_static = 28;
    Output output = 30;
  }
}


message ChannelInfo {
  message BaseAChannel {
    Stream in_id = 1;
  }
  message InputChannel {
  }
  message OutputChannel {
    Stream in_id = 1;
  }
  message BroadcastChannel {
    Stream in_id = 1;
    repeated uint64 idxes = 2;
  }

  message BaseBChannel {
    Stream in_id = 1;
  }
  message PartitionChannel {
    Stream a_in_id = 1;
    Stream b_in_id = 2;
    repeated uint64 idxes = 3;
  }
  message ReassembleChannel {
    repeated Stream a_in_ids = 1;
    Stream b_in_id = 2;
  }
  message ZipChannel {
    Stream a_in_id = 1;
    Stream b_in_id = 2;
  }
  message UnzipChannel {
    Stream in_id = 1;
    repeated uint64 idxes = 2;
  }
  message ChannelB {
    Sim b = 1;
    oneof chan_type_b {
      BaseBChannel base_b = 2;
      PartitionChannel partition = 3;
      ReassembleChannel reassemble = 4;
      ZipChannel zip = 5;
      UnzipChannel unzip = 6;
    }
  }
  Sim a = 1;
  oneof chan_type_a {
    BaseAChannel base_a = 2;
    InputChannel input = 3;
    OutputChannel output = 4;
    BroadcastChannel broadcast = 5;
    ChannelB channel_b = 6;
  }
}

message Stream { // corresponds to StreamNode
  uint64 id = 1;
  optional uint64 idx = 2;
}

message Input {
}

message Output {
}

message Zip {
}

/*
message FlatReassemble {
    string label = 1;
    uint64 id = 2;
    repeated uint64 streams = 3;
}
*/

message Map {
  ElemtoElemFunc func = 1;
}