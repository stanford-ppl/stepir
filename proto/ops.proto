syntax = "proto3";

package stepir;

import "datatype.proto";
import "func.proto";

message Operation {
  string name = 1;
  uint64 id = 2;
  reserved 3 to 10;
  Sim a = 11;
  optional Sim b = 12;
  reserved 13 to 20;
  oneof op_type {
    TypeA type_a = 21;
    TypeAB type_a_b = 22;
  }
}

message TypeA {
  oneof op_a {
    Input input = 1;
    Output output = 2;
    Broadcast broadcast = 3;
    RepeatStatic repeat_static = 4;
    // Bufferize bufferize = ;
    // Promote promote = ;
    // Reshape reshape = ;
    // Flatten flatten = ;
    // Enumerate enumerate = ;
  }
}

message TypeAB {
  oneof op_ab {
    Map map = 1;
    Accum accum = 2;
    // Flatmap flatmap = ;
    // Scan scan = ;
    // FnBlock fn_block = ;

    Zip zip = 10;
    Unzip unzip = 11;
    // RepeatRef repeat_ref = ;
    // RepeatN repeat_n = ;
    Partition flat_partition = 15;
    Reassemble flat_reassemble = 16;
  }
}

message Output {
  uint64 node_id = 1;
  optional uint64 stream_idx = 2;
  uint64 dim = 3;
}

message Input {}

message Map {
  uint64 node_id = 1;
  optional uint64 stream_idx = 2;
  ElemtoElemFunc func = 3;
}

message Accum {
  uint64 node_id = 1;
  optional uint64 stream_idx = 2;
  AccumFunc accum_func = 3;
  InitFunc init_func = 4;
  uint64 rank = 5;
}

message Broadcast {
  uint64 node_id = 1;
  optional uint64 stream_idx = 2;
  repeated uint64 out_stream_idxes = 3;
}

message RepeatStatic {
  uint64 node_id = 1;
  optional uint64 stream_idx = 2;
  uint64 repeat = 3;
}

message Partition {
  uint64 node_id_data = 1;
  optional uint64 stream_idx_data = 2;
  uint64 node_id_control = 3;
  optional uint64 stream_idx_control = 4;
  repeated uint64 out_stream_idxes = 5;
}

message Reassemble {
  message Stream {
    uint64 node_id = 1;
    optional uint64 stream_idx = 2;
  }
  Stream node_id_data = 1;
  uint64 node_id_control = 2;
  optional uint64 stream_idx_control = 3;
}

message Zip {
  uint64 node_id_a = 1;
  optional uint64 stream_idx_a = 2;
  uint64 node_id_b = 3;
  optional uint64 stream_idx_b = 4;
}

message Unzip {
  uint64 node_id = 1;
  optional uint64 stream_idx = 2;
  repeated uint64 idxes = 3;
}
